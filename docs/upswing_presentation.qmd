---
title: "Predicting surges and upswings before it occurs"
author: Quang Nguyen & Jacob Bien
date: 2022-06-30
format: 
    revealjs:
        theme: simple
        chalkboard: false
        smaller: true
        scrollable: true
        pdf-separate-fragments: false
editor: visual
---

```{r setup, echo=FALSE, include=FALSE}
library(here)
library(covidcast)
library(epiprocess)
library(tidyverse)
library(ggsci)
library(tsibble)
library(covidHubUtils)
library(lubridate)
library(rlang)
library(patchwork)
library(pROC)
library(glue)
library(gt)
theme_set(theme_bw())

d_range <- seq(ymd("2020-11-01"), ymd("2022-06-01"), by = 7)
curr_date <- "2022-06-01"
h <- 4
wk_ahead <- 1
inc_case_targets <- paste(1:h, "wk ahead inc case")
surge_thresh <- 0.5
min_inc <- 20


forecast <- readRDS(file = here("data", "pred_data_20220608.rds"))
truth_data <- load_truth(
    truth_source = "JHU", 
    target_variable = "inc case", 
    locations = state.name
)

true_range <- forecast %>% pull(target_end_date) %>% 
    unique() %>% 
    lubridate::as_date()

# convert truth_data to epi_df
truth_epidf <- truth_data %>% 
    select(-c(model, location, target_variable, location_name, 
              abbreviation, full_location_name)) %>% 
    dplyr::rename("time_value" = "target_end_date") %>%
    filter(time_value %in% true_range) %>%
    as_epi_df(geo_type = "state")

truth_epidf <- truth_epidf %>% 
    mutate(gr = growth_rate(y = value, method = "rel_change", h = h) * h) %>%
    mutate(surge = case_when(
        gr >= surge_thresh & value >= min_inc ~ TRUE,
        TRUE ~ FALSE
    )) 

truth_epidf <- truth_epidf %>% 
    group_by(geo_value) %>% epi_slide(~{
        bef <- .x$surge[1]
        focal <- .x$surge[2]
        if (is.na(focal)){
            out <- NA
        } else {
            if (bef == FALSE & focal == TRUE){
                out <- TRUE
            } else if (bef == TRUE & focal == FALSE){
                out <- FALSE
            } else {
                out <- FALSE
            }
        }
        return(out)
}, n = 2 * 7 * 1, align = "right", new_col_name = "upswing")

pred_gr <- readRDS(file = here("output", "calc_gr.rds"))
pred_gr_classif <- pred_gr %>%
    mutate(surge_pred = case_when(
        pred_gr >= surge_thresh & obs >= min_inc ~ TRUE,
        is.na(pred_gr) ~ NA, 
        TRUE ~ FALSE
    )) %>% group_by(geo_value, model) %>% 
    epi_slide(~{
        bef <- .x$surge_pred[1]
        focal <- .x$surge_pred[2]
        if (is.na(focal) | is.na(bef)){
            out <- NA
        } else {
            if (bef == FALSE & focal == TRUE){
                out <- TRUE
            } else if (bef == TRUE & focal == FALSE){
                out <- FALSE
            } else {
                out <- FALSE
            }
        }
        return(out)
    }, n = 2 * 7 * 1, align = "right", new_col_name = "upswing_pred")

pred_gr_classif <- pred_gr_classif %>% 
    mutate(upswing_pred = if_else(model == "COVIDhub-ensemble", 
                                  FALSE, upswing_pred)) %>% 
    mutate(surge_pred = if_else(model == "COVIDhub-ensemble", 
                                FALSE, surge_pred)) %>% 
    mutate(model = recode(model, 
                          `COVIDhub-ensemble` = "Never-Baseline"))

models <- c("COVIDhub-baseline", "RobertWalraven-ESG", 
            "CovidAnalytics-DELPHI", "USC-SI_kJalpha", 
            "COVIDhub-4_week_ensemble", "CU-nochange", 
            "Karlen-pypm", "CU-scenario_low", 
            "Never-Baseline")
eval_surge <- map_dfr(models, ~{
    misclass_surge <- pred_gr_classif %>% ungroup() %>% 
        filter(model == .x) %>% 
        filter(!is.na(surge_pred)) %>% 
        summarise(misclass = mean(surge != surge_pred), 
                  sens = sum(surge & surge_pred)/sum(surge), 
                  spec = sum(!surge & !surge_pred)/sum(!surge))
    if (.x == "Never-Baseline"){
        misclass_surge <- mutate(misclass_surge, auc = NA_real_, 
                                 type = "surge")
        
    } else {
        pmod <- pROC::roc(surge ~ pred_gr, 
                      data = pred_gr_classif %>% filter(model == .x), 
                      subset = !is.na(surge_pred))
        misclass_surge <- mutate(misclass_surge, 
                                 auc = round(as.numeric(pmod$auc),3), 
                                 type = "surge")
    }
    misclass_surge <- misclass_surge %>% mutate(model = .x)
    return(misclass_surge)
})

eval_upswing <- map_dfr(models, ~{
    misclass_upswing <- pred_gr_classif %>% ungroup() %>% 
        filter(model == .x) %>% 
        filter(!is.na(upswing_pred)) %>% 
        summarise(misclass = mean(upswing != upswing_pred, na.rm = TRUE),
                  upswing_prev = mean(upswing, na.rm = TRUE),
                  sens = sum(upswing & upswing_pred, 
                             na.rm = TRUE)/sum(upswing, 
                                               na.rm = TRUE), 
                  spec = sum(!upswing & !upswing_pred, 
                             na.rm = TRUE)/sum(!upswing, na.rm = TRUE))
    if (.x == "Never-Baseline"){
        misclass_upswing <- mutate(misclass_upswing, 
                           auc = NA_real_,
                           type = "upswing")
    } else {
        pmod <- pROC::roc(upswing ~ pred_gr, 
                      data = pred_gr_classif %>% filter(model == .x), 
                      subset = !is.na(upswing_pred))
        misclass_upswing <- mutate(misclass_upswing, 
                                   auc = round(as.numeric(pmod$auc),3),
                                   type = "upswing")
    }
    misclass_upswing <- misclass_upswing %>% mutate(model = .x)
    return(misclass_upswing)
})
```

## Motivation

> When optimized across the entire pandemic, without a special focus on the 'peaks', models will naturally be trained to predict well during non-peak times, as the vast majority of predicted time points are at non-peak moments [^1]

[^1]: Challenges in training ensembles to forecast COVID-19 cases and deaths in the United States. [*forecasters.org*](https://forecasters.org/blog/2021/04/09/challenges-in-training-ensembles-to-forecast-covid-19-cases-and-deaths-in-the-united-states/)

Forecasters are not optimized to predict the onset of a peak.

::: {.fragment .fade-in}
-   Update evaluation with more data since October, 2021.

-   Evaluating predicting surges and upswings in cases.

-   Leveraging `epiprocess` R package.
:::

## Defining surges and upswings {.smaller}

Previous definition of **surge**

```{r, echo=FALSE}
f_col <- c("p1" = "#9F2B68", "yes" = "#FFD700", "p2" = "#800020")
focal <- "2021-01-02"
p1_min <- ymd("2020-11-14")
p1_max <- ymd("2020-12-05")
p2_min <- ymd("2020-12-12")
p2_max <- ymd("2021-01-02")

ggplot(truth_epidf %>% ungroup() %>% filter(geo_value == "ma") %>% 
           mutate(label = case_when(
               time_value == focal ~ "yes", 
               TRUE ~ "no"
           )), 
       aes(x = time_value, y = value)) + 
    geom_point(aes(col = label)) +
    annotate("segment", x = as_date("2021-05-01"), 
             xend = as_date("2020-12-15"), 
             y = 100000, yend = 75000, size = 0.5, 
             arrow = arrow(length = unit(.1,"cm"))) +
    annotate(geom = "text",
              y = 100100,
              x = lubridate::as_date("2021-05-01"), 
              label = "Last 4-weeks", hjust = -0.05) + 
    annotate("segment", x = as_date("2021-01-30"), 
             xend = as_date("2020-11-21"), 
             y = 75000, yend = 50000, size = 0.5, 
             arrow = arrow(length = unit(.1,"cm"))) +
    annotate(geom = "text",
              y = 75100,
              x = lubridate::as_date("2021-01-30"), 
              label = "4-weeks before that", hjust=-0.05) +
    annotate(geom = "rect",
              ymax = 150000,
              ymin = 0, 
              xmin = lubridate::as_date(p1_min) - 0.5, 
              xmax = lubridate::as_date(p1_max) + 0.5, 
              fill = "#800020", 
              alpha = 0.5) +
    annotate(geom = "rect",
              ymax = 150000,
              ymin = 0, 
              xmin = lubridate::as_date(p2_min) - 0.5, 
              xmax = lubridate::as_date(p2_max) + 0.5, 
              fill = "#FFD700", 
              alpha = 0.5) +
    geom_line(alpha = 0.8) + 
    scale_color_aaas() +
    theme(legend.position = "None") +
    ylim(0,150000) +
    labs(x = "Time (in weeks)", y = "Incident cases", 
         title = "Incident cases in MA from 2021-10-31 to 2022-06-18")
```

Cases are **surging** if the last 4-weeks have been at least 50% worse than the 4 weeks before that where the incidence number of cases is at least 20 or more.

An **upswing** is the week defining beginning of a surge period.

## Defining surges and upswings {.smaller}

New definition of **surge**

```{r, echo=FALSE}
f_col <- c("p1" = "#9F2B68", "yes" = "#FFD700", "p2" = "#800020")
focal <- "2021-01-02"
p1_min <- ymd("2020-12-12")
p1_max <- ymd("2021-01-02")
p2_min <- ymd("2021-01-09")
p2_max <- ymd("2021-01-30")

ggplot(truth_epidf %>% ungroup() %>% filter(geo_value == "ma") %>% 
           mutate(label = case_when(
               time_value == focal ~ "yes", 
               TRUE ~ "no"
           )), 
       aes(x = time_value, y = value)) + 
    geom_point(aes(col = label)) +
    annotate("segment", x = as_date("2021-05-01"), 
             xend = as_date("2020-12-15"), 
             y = 100000, yend = 75000, size = 0.5, 
             arrow = arrow(length = unit(.1,"cm"))) +
    annotate(geom = "text",
              y = 100100,
              x = lubridate::as_date("2021-05-01"), 
              label = "Last 4-weeks", hjust = -0.05) + 
    annotate("segment", x = as_date("2021-03-15"), 
             xend = as_date("2021-01-23"), 
             y = 75000, yend = 50000, size = 0.5, 
             arrow = arrow(length = unit(.1,"cm"))) +
    annotate(geom = "text",
              y = 75100,
              x = lubridate::as_date("2021-03-15"), 
              label = "4-weeks ahead", hjust=-0.05) +
    annotate(geom = "rect",
              ymax = 150000,
              ymin = 0, 
              xmin = lubridate::as_date(p1_min) - 0.5, 
              xmax = lubridate::as_date(p1_max) + 0.5, 
              fill = "#800020", 
              alpha = 0.5) +
    annotate(geom = "rect",
              ymax = 150000,
              ymin = 0, 
              xmin = lubridate::as_date(p2_min) - 0.5, 
              xmax = lubridate::as_date(p2_max) + 0.5, 
              fill = "#FFD700", 
              alpha = 0.5) +
    geom_line(alpha = 0.8) + 
    scale_color_aaas() +
    theme(legend.position = "None") +
    ylim(0,150000) +
    labs(x = "Time (in weeks)", y = "Incident cases", 
         title = "Incident cases in MA from 2021-10-31 to 2022-06-18")
```

::: r-stack
::: {.fragment .fade-in-then-out}
Cases are **surging** if the last 4 weeks have been at least 50% worse than the 4 weeks ahead where the incidence number of cases is at least 20 or more.

An **upswing** is the week defining beginning of a surge period.
:::

::: {.fragment .fade-in-then-out}
A 4-week ahead forecaster is a **nowcaster** for whether a week is currently in a surge. This can be computed easily from `epiprocess::growth_rate` using the `rel_change` method.
:::
:::

## Aside: Using `growth_rate` function from `epiprocess` {.smaller}

::: {.fragment .fade-in-then-out}
The equation for `rel_change` approach is $\frac{1}{h} * \left(\frac{\bar{B}}{\bar{A}} - 1\right)$ for a focal time $T$, with case counts $Y_{T}$ and bandwidth $h$ (in this case $h = 4$ representing a 4-week period used to define surges). We can manipulate this equation to be:

$$
\frac{1}{h} * \left(\frac{\bar{B}}{\bar{A}} - 1\right) = \frac{1}{h} * \left(\frac{\bar{B} - \bar{A}}{\bar{A}}\right) = \\ \frac{1}{h} * \left(\frac{(h)^{-1}\left(\sum_{t = T+1}^{T + h} Y_t - \sum_{t = T+1-h}^{T} Y_t\right)}{(h)^{-1}\sum_{t = T+1-h}^{T} Y_t}\right)
$$

Since the $h$-week-incidence relative change is defined as:

$$
\frac{\left(\sum_{t = T+1}^{T + h} Y_t - \sum_{t = T+1-h}^{T} Y_t\right)}{\sum_{t = T+1-h}^{T} Y_t}
$$

We can calculate the difference by multiplying the `growth_rate` estimate with the bandwidth $h$.
:::

## Calculating surges and upswings from real data {.smaller}

```{r}
#| fig-align: center
#| warning: false
size_shape <- c("TRUE" = 5, "FALSE" = 1.5)
ggplot(truth_epidf %>% ungroup() %>% filter(geo_value == "ma"), 
       aes(x = time_value, y = value)) + 
    geom_point(aes(col = surge, size = upswing)) + 
    geom_line(alpha = 0.2) + 
    scale_size_manual(values = size_shape) +
    labs(y = "Incident cases", x = "Time (in weeks)", 
         title = "Incident cases in MA from 2021-11-01 to 2022-06-18", 
         col = "Surge", size = "Upswing")
```

## Evaluating forecasters {.smaller}

::: r-stack
::: {.fragment .fade-in-then-out}
-   How good are the forecasters at predicting upswings AND surges?

-   Comparing and contrasting between the different forecasters themselves.

    ```{r}
    #| echo: false
    #| fig-align: center
    ggplot(forecast %>% filter(horizon == 4, model != "COVIDhub-ensemble"), aes(x = model, y = target_end_date)) + 
        geom_point() + 
        labs(x = "Models", y = "4-week ahead target end date") +
        coord_flip()
    ```
:::

::: {.fragment .fade-in-then-out}
Take truth and forecast data from `covidHubUtils` with $h = 4$ as the bandwidth of interest (i.e. 4-week-ahead forecasters). Evaluating period is between 2020-10-31 and 2022-06-18

![](images/paste-D1FE78E3.png){fig-align="center" width="524"}
:::

::: {.fragment .fade-in-then-out}
This was done using `epiprocess::epi_slide`. Values are returned as `NA` if:

-   There are not enough dates, e.g. the sliding period contains 7 weeks instead of 8 weeks (at the beginning and end of the evaluation time period).

-   Requiring that forecasters need to have the complete $h$-week ahead forecast, and that the first horizon has to start at $T+1$

**Example**: If the time $T+1$ is 2021-01-02, we obtain forecasts from a **forecast date** where 2021-01-02 is the first horizon. Additionally, the total number of horizons for that forecast date has to be $h$.
:::
:::

## Nowcasting surges {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| fig-align: center
p1 <- ggplot(eval_surge, aes(x = reorder(model, -misclass), 
                       y = misclass)) + ylim(0,0.5) + 
    geom_point(size = 3) + 
    labs(x = "Models", y = "Misclassification Error") + 
    coord_flip()

library(pals)
col_sc <- pals::glasbey(n = 9)
names(col_sc) <- models

suppressMessages(mods <- map(models, ~{
    pROC::roc(surge ~ pred_gr, data = pred_gr_classif %>% 
                  filter(model == .x), 
                  subset = !is.na(surge_pred), verbose = FALSE)
}))
names(mods) <- models

auc_df <- imap_dfr(mods, ~{
    tb <- tibble(
        sensitivity = .x$sensitivities,
        specificity = .x$specificities,
        Models = .y
    )
    return(tb)
})

auc_df <- auc_df %>% mutate(Models = as.factor(Models)) %>% 
    filter(Models != "Never-Baseline")
p2 <- ggplot(auc_df, aes(x = 1 - specificity, 
                   y = sensitivity, col = Models)) + 
    geom_abline() + 
    geom_line(aes(col = Models)) + 
    scale_color_manual(values = col_sc) + 
    labs(x = "1 - Specificity", y = "Sensitivity")
p1
p2
#names(mods) <- models
#plot(mods[[1]], col = colors[1], legacy.axes = TRUE, main = "ROC #curves for surge prediction")
#for (i in 2:length(mods)){
#    plot(mods[[i]], add = TRUE, col = colors[i])
#}

#legend(0.4,0.5,legend=models, col = colors, lty = 1, cex = 0.8)
```
:::

::: {.column width="50%"}
```{r}
eval_surge %>% select(-type) %>% 
    select(model, misclass, sens, spec, auc) %>% 
    rename("Misclassification Rate" = "misclass", 
           "Sensitivity" = "sens", 
           "Specificity" = "spec", 
           "AUROC" = "auc", 
           "Models" = "model") %>% 
    gt() %>% 
    tab_header(title = 
                   md("**Surge classification performance**")) %>%
    fmt_number(columns = c("Misclassification Rate", 
                           "Sensitivity", "Specificity", "AUROC"))
```
:::
:::

::: aside
The `Never-Baseline` model predicts all periods as `FALSE` (no surges or upswings)
:::

## Nowcasting upswings {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| fig-align: center
p1 <- ggplot(eval_upswing, aes(x = reorder(model, -misclass), 
                       y = misclass)) + ylim(0,0.5) + 
    geom_point(size = 3) + 
    labs(x = "Models", y = "Misclassification Error") + 
    coord_flip()

library(pals)
col_sc <- pals::glasbey(n = 9)
names(col_sc) <- models

suppressMessages(mods <- map(models, ~{
    pROC::roc(upswing ~ pred_gr, data = pred_gr_classif %>% 
                  filter(model == .x), 
                  subset = !is.na(upswing_pred), verbose = FALSE)
}))
names(mods) <- models

auc_df <- imap_dfr(mods, ~{
    tb <- tibble(
        sensitivity = .x$sensitivities,
        specificity = .x$specificities,
        Models = .y
    )
    return(tb)
})

auc_df <- auc_df %>% mutate(Models = as.factor(Models)) %>% 
    filter(Models != "Never-Baseline")
p2 <- ggplot(auc_df, aes(x = 1 - specificity, 
                   y = sensitivity, col = Models)) + 
    geom_abline() + 
    geom_line(aes(col = Models)) + 
    scale_color_manual(values = col_sc) + 
    labs(x = "1 - Specificity", y = "Sensitivity")
p1
p2
#names(mods) <- models
#plot(mods[[1]], col = colors[1], legacy.axes = TRUE, main = "ROC #curves for surge prediction")
#for (i in 2:length(mods)){
#    plot(mods[[i]], add = TRUE, col = colors[i])
#}

#legend(0.4,0.5,legend=models, col = colors, lty = 1, cex = 0.8)
```
:::

::: {.column width="50%"}
```{r}
eval_upswing %>% select(-type) %>% 
    select(model, misclass, sens, spec, auc) %>% 
    rename("Misclassification Rate" = "misclass", 
           "Sensitivity" = "sens", 
           "Specificity" = "spec", 
           "AUROC" = "auc", 
           "Models" = "model") %>% 
    gt() %>% 
    tab_header(title = 
                   md("**Upswing classification performance**")) %>%
    fmt_number(columns = c("Misclassification Rate", 
                           "Sensitivity", "Specificity", "AUROC"))
```
:::
:::

::: aside
The `Never-Baseline` model predicts all periods as `FALSE` (no surges or upswings)
:::

## Looking closer at the models (surges) 

`CovidAnalytics-DELPHI` for the state of Massachusetts

```{r}
#| fig-align: center
mod_plot <- pred_gr_classif %>% filter(model == models[3]) 

p1 <- ggplot(mod_plot %>% filter(geo_value == "ma"), 
       aes(x = time_value, y = obs)) + geom_point(aes(col = surge)) + geom_line(alpha = 0.5) + 
    labs(x = "Week", title = "Surge classification from real data", y = "Incident cases") + theme(legend.position = "None")
p2 <- ggplot(mod_plot %>% filter(geo_value == "ma"), aes(x = time_value, y = obs)) + 
    geom_point(aes(col = surge_pred)) + 
    geom_line(alpha = 0.5) + 
    labs(x = "Week", title = "Nowcasting surges", y = "Incident cases", col = "Surge")
p1 / p2 + plot_layout(guides = "collect")
```

## Looking closer at the models (upswing) 

`CovidAnalytics-DELPHI` for the state of Massachusetts

```{r}
#| fig-align: center
mod_plot <- pred_gr_classif %>% filter(model == models[3]) 

p1 <- ggplot(mod_plot %>% filter(geo_value == "ma"), 
       aes(x = time_value, y = obs)) + geom_point(aes(col = upswing)) + geom_line(alpha = 0.5) + 
    labs(x = "Week", title = "Upswing classification from real data", y = "Incident cases") + theme(legend.position = "None")
p2 <- ggplot(mod_plot %>% filter(geo_value == "ma"), aes(x = time_value, y = obs)) + 
    geom_point(aes(col = upswing_pred)) + 
    geom_line(alpha = 0.5) + 
    labs(x = "Week", title = "Nowcasting upswings", y = "Incident cases", col = "Upswing")
p1 / p2 + plot_layout(guides = "collect")
```

## Looking closer at the models  (surges)

`COVIDhub-4_week_ensemble` for the state of Massachusetts

```{r}
#| fig-align: center
mod_plot <- pred_gr_classif %>% filter(model == models[5]) 

p1 <- ggplot(mod_plot %>% filter(geo_value == "ma"), 
       aes(x = time_value, y = obs)) + geom_point(aes(col = surge)) + geom_line(alpha = 0.5) + 
    labs(x = "Week", title = "Surge classification from real data", y = "Incident cases") + theme(legend.position = "None")
p2 <- ggplot(mod_plot %>% filter(geo_value == "ma"), aes(x = time_value, y = obs)) + 
    geom_point(aes(col = surge_pred)) + 
    geom_line(alpha = 0.5) + 
    labs(x = "Week", title = "Nowcasting surges", y = "Incident cases", col = "Surge")
p1 / p2 + plot_layout(guides = "collect")
```

## Looking closer at the models (upswings)

`COVIDhub-4_week_ensemble` for the state of Massachusetts

```{r}
#| fig-align: center
mod_plot <- pred_gr_classif %>% filter(model == models[5]) 

p1 <- ggplot(mod_plot %>% filter(geo_value == "ma"), 
       aes(x = time_value, y = obs)) + geom_point(aes(col = upswing)) + geom_line(alpha = 0.5) + 
    labs(x = "Week", title = "Upswing classification from real data", y = "Incident cases") + theme(legend.position = "None")
p2 <- ggplot(mod_plot %>% filter(geo_value == "ma"), aes(x = time_value, y = obs)) + 
    geom_point(aes(col = upswing_pred)) + 
    geom_line(alpha = 0.5) + 
    labs(x = "Week", title = "Nowcasting upswings", y = "Incident cases", col = "Upswing")
p1 / p2 + plot_layout(guides = "collect")
```

## Conclusions {.smaller}

::: incremental
-   Most forecasters are good at detecting case surges overall but not good at detecting when a surge is an upswing.

-   Misclassification rate is lower for predicting upswings is because the number of upswings are rare (0.04% of total weeks evaluated - \~200 events in total out of 5000 across all jurisdictions).
:::

## Future directions

::: {.fragment fragment-index="1"}
-   Phase categories in comparison to CDC
:::

::: {.fragment fragment-index="3"}
-   Downswing analysis and combine results with prior work on deaths.

-   Improve classification process and train a forecaster that is better at predicting **upswings**.
:::

::: {.fragment .fade-in-then-out fragment-index="2"}
![](images/Screen%20Shot%202022-03-21%20at%2012.13.11%20PM.png){fig-align="center" width="347"}
:::
